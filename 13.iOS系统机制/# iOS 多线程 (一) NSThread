# iOS 多线程 (一) NSThread

##NSThread

> 一个NSThread对象控制执行的线程。当你想在自己的执行线程的Objective-C的方法运行使用这个类。当你需要执行一个漫长的任务线程是特别有用的，但不希望它阻止应用程序的其余部分的执行。特别是，您可以使用线程来避免阻塞应用程序，它处理的用户界面和事件相关的操作的主线。线程也可以用来将一个大的工作分成几个较小的作业，这可能会导致在多核计算机性能的提高。

- 创建和启动线程
- 主线程相关用法
- 其他方法

***

## 线程的状态

    /**
    // 上述2种创建线程方式的优缺点
    - 优点：简单快捷
    - 缺点：无法对线程进行更详细的设置
    */
    func testNSThread(){
        // 1.创建线程后自动启动：
        //        NSThread.detachNewThreadSelector("threadInMainMethod", toTarget: self, withObject: nil)
        // 隐私创建并启动线程
        //        NSThread.performSelectorInBackground("threadInMainMethod", withObject: nil)
        
        // 2. 先创建，后启动 如果可变 var
        var myThread = NSThread(target: self, selector: "threadInMainMethod", object: nil)
        myThread.start()
        
        //        myThread.isMainThread  // Bool 是否为主线程
        //        myThread = NSThread.mainThread() // 返回主线程