# Swift中文教程（七） 闭包  --没有失败，唯有放弃
**闭包（Closures）是独立的函数代码块，能在代码中传递及使用。Swift中的闭包与C和Objective-C中的代码块及其它编程语言中的匿名函数相似。**
闭包可以在上下文的范围内捕获、存储任何被定义的常量和变量引用。因这些常量和变量的封闭性，而命名为“闭包（Closures）”。Swift能够对所有你所能捕获到的引用进行内存管理。
- 全局函数都是闭包，特点是有函数名但没有捕获任何值。
- 嵌套函数都是闭包，特点是有函数名，并且可以在它封闭的函数中捕获值。
- 闭包表达式都是闭包，特点是没有函数名，可以使用轻量的语法在它所围绕的上下文中捕获值。

- 推理参数及返回值类型源自上下文
- 隐式返回源于单一表达式闭包
- 简约参数名
- 尾随闭包语法

1. 闭包表达式的语法
```
{(常量/变量/inout类型) ->returnType in
	statements
}
```
- 参数不提供默认值，在参数列表的最后使用 可变参数
- 元组可以作为参数和返回值

2. 根据上下文推断类型
`reversed = names.sort({s1,s2 in return s1 >s2})`
- 单表达式闭包隐式返回
`reversed = names.sort({s1,s2 in s1>s2})`
- 参数名称缩写:(内联函数提供了参数名称缩写功能 $0,$1,$2)
在闭包表达式中使用参数名称缩写,您可以在闭包参数列表中省略对其的定义
`reversed = names.sort({$0>$1})`
- 运算符函数
`reversed = names.sort(>)`

3.尾随闭包

> 如果您需要将一个很长的闭包表达式作为最后一个参数传递给函数,可以使用尾随闭包来增强函数的可读性。 尾 随闭包是一个书写在函数括号之后的闭包表达式,函数支持将其作为最后一个参数调用。

4. 捕获值

> 上下文中捕获常量或变量,在闭包函数体内引用和修改这些值,常量和变量的原域已经不存在。
Swift可能会捕捉和保存一份对值的拷贝,如果这个值是不可变或是在闭包外的。 Swift同样负责 被捕捉的所有变量的内存管理,包括释放不被需要的变量。

5. 闭包是引用类型

> 常量指向的闭包可以增加其捕获的变量值,这是因为函数和闭包都是引用类型。
将闭包赋值给了两个不同的常量/变量,两个值都会指向同一个闭包
`let alsoIncrementByTen = incrementByTen; alsoIncrementByTen();// 返回的值为50`
